name: GBP Pull Upstream
on:
  workflow_call:
    inputs:
      repo:
        type: string
        description: Downstream repository to clone
        required: true
  workflow_dispatch:
    inputs:
      repo:
        type: string
        description: Downstream repository to clone
        required: true

env:
  DEBEMAIL: ${{ secrets.LP_EMAIL }}

jobs:
  gbp-pull-upstream:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git git-buildpackage
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PUB_KEY }}" > ~/.ssh/id_rsa.pub
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 400 ~/.ssh/id_rsa
      - name: Import GPG Keys
        run: |
          sudo apt update
          sudo apt install -y ca-certificates
          echo "${{ secrets.GPG_PUB_KEY }}" > pub.key
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > private.key
          gpg --import pub.key
          gpg --import private.key
          rm *.key
      - name: Configure Devscripts
        run: |
          FINGERPRINT=$(gpg --list-keys --with-colons --fingerprint | awk -F: '$1 == "fpr" {print $10;}' | awk 'NR==1{print $1}')
          cp config/.devscripts ~/
          sed -i "s/<gpg.key>/$FINGERPRINT/g" ~/.devscripts
          sed -i "s/<name>/${{ secrets.LP_USER }}/g" ~/.devscripts
          sed -i "s/<email>/${{ secrets.LP_EMAIL }}/g" ~/.devscripts
          echo 'DEBCHANGE_VENDOR=debian' | tee -a ~/.devscripts
      - name: Clone Repository
        run: |
          git clone ${{ inputs.repo }} project
          cd project
          git remote add upstreamvcs $(grep -r Repository: debian/upstream/metadata | cut -c 13-)
          git fetch --all
          git config user.email ${{ secrets.LP_EMAIL }}
          git config user.name "${{ secrets.LP_USER }}"
      - name: Checkout Branches
        run: |
          cd project
          git checkout --track origin/pristine-tar
          git checkout --track origin/upstream/latest
          git checkout debian/master          
      - name: Rebase Patches
        run: |
          cd project
          gbp pq import
          gbp pq export
          git add debian
          git commit -m "Rebase patches" || true
      - name: Import Upstream
        run: |
          cd project
          gbp import-orig --uscan --no-interactive
      - name: Push Branches
        run: |
          cd project
          gbp push
          git push origin debian/master
      - name: Parse Project Name
        if: failure()
        id: parse-project-name
        run: echo "name=$(basename ${{ inputs.repo }} .git)" >> $GITHUB_OUTPUT
      - name: Create Issue
        if: failure()
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKFLOW_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          ISSUE_TITLE: "GBP Pull Upstream Failure: ${{ steps.parse-project-name.outputs.name }}"
        with:
          update_existing: true
          search_existing: open
      - name: Create the Mattermost Message
        if: failure()
        run: |
          MESSAGE="GBP Pull Failure: ${{ steps.parse-project-name.outputs.name }}\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "{\"text\":\"$MESSAGE  \"}" > mattermost.json
      - uses: mattermost/action-mattermost-notify@master
        if: failure()
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MM_WEBHOOK }}
      - name: Clean Up
        if: always()
        run: |
          rm -rf ~/.ssh
          rm -rf ~/.gnugp
  gbp-build:
    uses: ./.github/workflows/gbp-build.yaml
    needs: [gbp-pull-upstream]
    secrets: inherit
    with:
      repo: ${{ inputs.repo }}
      branch: debian/master
      series: mantic
  mm-notify:
    runs-on: ubuntu-latest
    needs: [gbp-build]
    steps:
      - name: Parse Project Name
        id: parse-project-name
        run: echo "name=$(basename ${{ inputs.repo }} .git)" >> $GITHUB_OUTPUT
      - name: Create the Mattermost Message
        run: |
          MESSAGE="New release for ${{ steps.parse-project-name.outputs.name }} has been built and is ready for review."
          echo "{\"text\":\"$MESSAGE  \"}" > mattermost.json
      - uses: mattermost/action-mattermost-notify@master
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MM_WEBHOOK }}
